"use strict";(self.webpackChunktotem=self.webpackChunktotem||[]).push([[3818],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=r.createContext({}),i=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=i(e.components);return r.createElement(u.Provider,{value:t},e.children)},k="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,u=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),k=i(n),c=l,d=k["".concat(u,".").concat(c)]||k[c]||m[c]||a;return n?r.createElement(d,o(o({ref:t},s),{},{components:n})):r.createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=c;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p[k]="string"==typeof e?e:l,o[1]=p;for(var i=2;i<a;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>i});var r=n(7462),l=(n(7294),n(3905));const a={title:"Rust \u8ff4\u5708\u8207\u6d41\u7a0b\u63a7\u5236",description:"Rust Loops and Flow Controlling",keywords:["Rust","describing","the main topics"]},o="Rust \u8ff4\u5708\u8207\u6d41\u7a0b\u63a7\u5236",p={unversionedId:"Rust\u8d77\u6b65\u8d70/Rust_Loop_Condition",id:"Rust\u8d77\u6b65\u8d70/Rust_Loop_Condition",title:"Rust \u8ff4\u5708\u8207\u6d41\u7a0b\u63a7\u5236",description:"Rust Loops and Flow Controlling",source:"@site/docs/003_Rust\u8d77\u6b65\u8d70/007_Rust_Loop_Condition.md",sourceDirName:"003_Rust\u8d77\u6b65\u8d70",slug:"/Rust\u8d77\u6b65\u8d70/Rust_Loop_Condition",permalink:"/en/docs/Rust\u8d77\u6b65\u8d70/Rust_Loop_Condition",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Rust \u8ff4\u5708\u8207\u6d41\u7a0b\u63a7\u5236",description:"Rust Loops and Flow Controlling",keywords:["Rust","describing","the main topics"]},sidebar:"totem_sidebar",previous:{title:"Rust \u6240\u6709\u6b0a",permalink:"/en/docs/Rust\u8d77\u6b65\u8d70/Rust_Ownership"},next:{title:"Rust \u53c3\u8003\u8207\u501f\u7528",permalink:"/en/docs/Rust\u8d77\u6b65\u8d70/Rust_References_Borrowing"}},u={},i=[{value:"if else",id:"if-else",level:2},{value:"\u4e09\u5143\u904b\u7b97\u5b50 ( Ternary Operator )",id:"\u4e09\u5143\u904b\u7b97\u5b50--ternary-operator-",level:2},{value:"for Loop",id:"for-loop",level:2},{value:"loop Loop",id:"loop-loop",level:2},{value:"while Loop",id:"while-loop",level:2},{value:"break continue \u4e2d\u65b7\u8ff4\u5708",id:"break-continue-\u4e2d\u65b7\u8ff4\u5708",level:2},{value:"break \u4e2d\u65b7\u4e26\u62cb\u51fa\u56de\u50b3\u503c",id:"break-\u4e2d\u65b7\u4e26\u62cb\u51fa\u56de\u50b3\u503c",level:3}],s={toc:i},k="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(k,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"rust-\u8ff4\u5708\u8207\u6d41\u7a0b\u63a7\u5236"},"Rust \u8ff4\u5708\u8207\u6d41\u7a0b\u63a7\u5236"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u91cd\u9ede\u6458\u8981",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"if ... else if ... else"),(0,l.kt)("li",{parentName:"ul"},"\u4e09\u5143\u904b\u7b97 ( Ternary Operator)"),(0,l.kt)("li",{parentName:"ul"},"\u8ff4\u5708",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"loop Loop: \u7121\u9650\u8ff4\u5708\uff0c\u9664\u975e\u9047\u5230 break  "),(0,l.kt)("li",{parentName:"ul"},"for Loop"),(0,l.kt)("li",{parentName:"ul"},"while Loop")))))),(0,l.kt)("h2",{id:"if-else"},"if else"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"condition \u7684\u90e8\u5206\u53ef\u4ee5\u7701\u7565\u62ec\u865f\uff0c\u52a0\u4e0a\u5c0f\u62ec\u865f\u7684\u8a71 IDE \u6703\u51fa\u73fe\u79fb\u9664\u7684\u5efa\u8b70\u3002  "),(0,l.kt)("li",{parentName:"ul"},"\u8207 Python \u4e0d\u540c\u7684\u662f\uff0cRust condition \u5fc5\u9808\u662f boolean\u3002(Python \u975e\u7a7a\u5b57\u4e32\u96c6\u5408\u7b49\u8996\u70ba True)  ")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Rust if else example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'    let x = 5;\n    let y = 6;\n\n    if x %2 ==0 && y %2 ==0 {\n        println!("both even");\n    }else if x %2 !=0 && y %2 !=0 {\n        println!("both odd");\n    }else{\n        println!("different");\n    }\n')),(0,l.kt)("h2",{id:"\u4e09\u5143\u904b\u7b97\u5b50--ternary-operator-"},"\u4e09\u5143\u904b\u7b97\u5b50 ( Ternary Operator )"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u4e5f\u53ef\u7b97\u662f\u4e00\u7a2e if else \u8b8a\u5f62\u3002 ",(0,l.kt)("span",{style:{color:"#0044FF"}}," ",(0,l.kt)("strong",{parentName:"li"},"Rust \u652f\u63f4 let statement \u4e2d\u4f7f\u7528 if")," "),"  "),(0,l.kt)("li",{parentName:"ul"},"\u4e0d\u540c\u5206\u652f\u7684\u56de\u50b3\u7d50\u679c\u5fc5\u9808\u76f8\u540c\u3002")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Rust Ternary Operator")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'//Syntax\nlet variable = if condition { expression_A } else { expression_B }; //\u6ce8\u610f\u6700\u672b\u7aef\u6709\u4e00\u500b\u5206\u865f\n\nlet num = 10;\nlet result = if num%2==0 {"even"} else {"odd"};\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Rust \u4e09\u5143\u904b\u7b97\u5176\u5be6\u53ef\u4ee5\u64f4\u5927\u6210 block \u7684\u5beb\u6cd5\u3002")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'//Syntax\nlet num = 15;\nlet result = \n    if num%2==0 {\n        if num > 10 {\n            "Even and > 10"\n        }else{\n            "Even and < 10"\n        }\n    } else {\n        if num > 10 {\n            "Odd and > 10"\n        }else{\n            "Odd and < 10"\n        }\n    };\nprintln!("num is {}", result );\n')),(0,l.kt)("h1",{id:"\u8ff4\u5708--loops-"},"\u8ff4\u5708 ( Loops )"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u8ff4\u5708",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"for Loop"),(0,l.kt)("li",{parentName:"ul"},"while Loop"),(0,l.kt)("li",{parentName:"ul"},"loop Loop: \u7121\u9650\u8ff4\u5708\uff0c\u9664\u975e\u9047\u5230 break  "))),(0,l.kt)("li",{parentName:"ul"},"break and continue",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"break: Rust \u7684 ",(0,l.kt)("strong",{parentName:"li"},"break \u5f8c\u65b9\u53ef\u4ee5\u642d\u914d expression\uff0c\u7528\u4f86\u62cb\u51fa\u56de\u50b3\u503c")," \u3002  ")))),(0,l.kt)("h2",{id:"for-loop"},"for Loop"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u7576\u689d\u4ef6\u767c\u751f\u6642\u4e2d\u65b7\u8ff4\u5708")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"for loop syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"//for each\nfor element in list {\n    statements...\n} \n\n//for in range\nfor element in (from..to) {\n    statements...\n} \n\nfor element in (from..to).rev() {\n    statements...\n} \n\n")),(0,l.kt)("h2",{id:"loop-loop"},"loop Loop"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u7121\u9650\u8ff4\u5708\uff0c\u76f4\u5230\u9047\u5230 break"),(0,l.kt)("li",{parentName:"ul"},"loop label")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"loop loop syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"'loop_label: loop{\n    statements...\n    //break;\n    //break expression;\n    //break 'loop_label;\n}\n")),(0,l.kt)("h2",{id:"while-loop"},"while Loop"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u7576\u689d\u4ef6\u767c\u751f\u6642\u4e2d\u65b7\u8ff4\u5708")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"while loop syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"    while condition {\n        statements...\n    }\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let mut count_down = 10;\n    \n    while count_down != 0 {\n        println!("{count_down}!");\n        count_down -= 1;\n    }\n    \n    println!("Fire\uff01");\n}\n')),(0,l.kt)("h2",{id:"break-continue-\u4e2d\u65b7\u8ff4\u5708"},"break continue \u4e2d\u65b7\u8ff4\u5708"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Rust \u4ee5 break \u95dc\u9375\u5b57\u4e2d\u65b7\u8ff4\u5708\u7684\u8a9e\u6cd5\u6709\u4e09\u7a2e",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u55ae\u7d14\u5730\u4e2d\u65b7\u8ff4\u5708"),(0,l.kt)("li",{parentName:"ul"},"\u591a\u91cd\u8ff4\u5708\u4e0b\u4e2d\u65b7\u5167\u5c64\u8ff4\u5708\u4e26\u7e7c\u7e8c\u6307\u5b9a\u5916\u5c64\u8ff4\u5708( \u642d\u914d loop label \u4f7f\u7528 ) "),(0,l.kt)("li",{parentName:"ul"},"\u4e2d\u65b7\u4e26\u62cb\u51fa\u56de\u50b3\u503c")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Break Syntax")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"label :",(0,l.kt)("br",{parentName:"li"}),"label name \u524d\u65b9\u8981\u52a0\u4e00\u500b  ' ","(","\u55ae\u5f15\u865f",")","\uff0c\u4e2d\u9593\u4e0d\u53ef\u6709\u7a7a\u767d\u3002",(0,l.kt)("br",{parentName:"li"}),"label name \u5f8c\u65b9\u8981\u63a5\u4e00\u500b  : ","(","\u5192\u865f",")","\u3002  ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"'loop_label: loop{\n    statements...\n    //break;\n    //break expression;\n    //break 'loop_label;\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Break with lable Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn break_basic() {\n    let data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    let time = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n    'outter: for element in data {\n        if element > 7 {\n            break;\n        }\n\n        'inner: for time in time {\n            if time > 5 {\n                continue 'outter; //go to label 'outter\n                // break 'outter;  //jump to label 'outter and stop\n            }\n\n            println!(\n                \"{} x {} ={} \",\n                element.to_string(),\n                time.to_string(),\n                element * time\n            )\n        }\n        print!(\"**** end\" ); //never print. break while e>7 or t>5.\n    }\n}\n")),(0,l.kt)("h3",{id:"break-\u4e2d\u65b7\u4e26\u62cb\u51fa\u56de\u50b3\u503c"},"break \u4e2d\u65b7\u4e26\u62cb\u51fa\u56de\u50b3\u503c"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u9996\u5148\u9019\u500b\u8a9e\u6cd5\u8b93\u4eba\u60f3\u5230\u7684\u7b2c\u4e00\u500b\u7591\u60d1\u662f\uff0c",(0,l.kt)("br",{parentName:"p"}),"\n","\u76f4\u63a5 return \u56de\u50b3\u503c\u5c31\u597d\u4e86\uff0c\u70ba\u4f55\u8981\u7531 break \u4f86\u56de\u50b3\u5462?    "),(0,l.kt)("p",{parentName:"blockquote"},"Rust \u662f expressive language\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u9019\u610f\u5473\u8457 Rust \u7684\u8a31\u591a\u7d50\u69cb\u751a\u81f3\u662f\u55ae\u50b3\u7684\u7531\u5927\u62ec\u865f\u5305\u8986\u7684\u5340\u584a\u90fd\u53ef\u4ee5\u6709\u56de\u50b3\u503c\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u6240\u4ee5\uff0c",(0,l.kt)("br",{parentName:"p"}),"\n","\u7b2c\u4e00\u662f Rust \u672c\u8eab\u8a9e\u8a00\u7684\u7279\u6027\u4f7f\u7136\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u7b2c\u4e8c\uff0creturn \u662f\u5c07\u6574\u500b function \u7d42\u7d50\uff0c\n\u800c break \u50c5\u4e2d\u65b7\u8ff4\u5708\u3002\u9019\u610f\u5473\u8457 function \u9084\u6d3b\u8457\uff0c\u9084\u80fd\u7e7c\u7e8c\u63a5\u4e0b\u4f86\u7684 statements\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u4e5f\u5c31\u662f\u8aaa\uff0c\u7576 loop \u4e26\u975e\u662f function \u7684\u6700\u7d42\u884c\u6642\uff0c\u7528\u9014\u4fbf\u51fa\u73fe\u4e86\u3002  "),(0,l.kt)("blockquote",{parentName:"blockquote"},(0,l.kt)("p",{parentName:"blockquote"},"\u53e6\u5916\uff0cBreak with return \u4f3c\u4e4e\u53ea\u80fd\u7528\u5728 loop loops\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u4e5f\u5c31\u662f\u4e2d\u65b7\u7121\u9650\u8ff4\u5708\u4e26\u7d66\u4e88\u65bc\u4e00\u500b\u4e2d\u65b7\u72c0\u614b\u503c\u3002 "))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Block with return")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"    let result = {\n        let a = 10;\n        let b = 20;\n        a * b // no ending ';', this is the last expr, the retval\n        };\n    println!(\"{}\" , result.to_string());\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Break with return Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\npub fn break_with_return() {\n    let mut rng = rand::thread_rng();\n\n    let mut tmp = 0;\n    let salt = loop {\n        tmp = rng.gen::<i32>();\n        if tmp > 100 {\n            break tmp; \n            //\u9019\u908a\u7528 break with return\uff0c\u5f97\u5230\u7d50\u679c\u4e26\u7e7c\u7e8c\n            //\u82e5\u7528 return\uff0c\u5247 function \u6574\u500b\u4e2d\u65b7\u3002\u5f8c\u9762\u5217\u5370,gen_key \u7686\u4e0d\u6703\u57f7\u884c\u3002\n        }\n    };\n\n    println!("Found base>100 : {}", salt);\n\n    let key = gen_key(salt);\n    println!("sale: {}", key)\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u50b3\u7d71 OOP \u5be6\u4f5c\u6bd4\u8f03")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Rust"},'pub fn break_with_return2() {\n    let salt = rand_num();\n\n    println!("Found base>100 : {}", salt);\n\n    let key = gen_key(salt);\n    println!("sale: {}", key)\n}\n\nfn rand_num() -> i32 {\n    let mut rng = rand::thread_rng();\n    let mut tmp = 0;\n    let mut salt = 0;\n    loop {\n        tmp = rng.gen::<i32>();\n        if tmp > 100 {\n            salt = tmp;\n            return salt;\n        }\n    }\n}\n')))}m.isMDXComponent=!0}}]);