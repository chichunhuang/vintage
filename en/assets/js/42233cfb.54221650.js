"use strict";(self.webpackChunktotem=self.webpackChunktotem||[]).push([[1450],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=u(n),k=r,d=c["".concat(o,".").concat(k)]||c[k]||m[k]||l;return n?a.createElement(d,i(i({ref:t},s),{},{components:n})):a.createElement(d,i({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[c]="string"==typeof e?e:r,i[1]=p;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},9011:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const l={title:"Rust \u8cc7\u6599\u578b\u5225",description:"Rust Data Type",keywords:["Rust","Data_Type"]},i="Rust \u8cc7\u6599\u578b\u5225",p={unversionedId:"Rust\u8d77\u6b65\u8d70/Rust_Data_Type",id:"Rust\u8d77\u6b65\u8d70/Rust_Data_Type",title:"Rust \u8cc7\u6599\u578b\u5225",description:"Rust Data Type",source:"@site/docs/003_Rust\u8d77\u6b65\u8d70/003_Rust_Data_Type.md",sourceDirName:"003_Rust\u8d77\u6b65\u8d70",slug:"/Rust\u8d77\u6b65\u8d70/Rust_Data_Type",permalink:"/en/docs/Rust\u8d77\u6b65\u8d70/Rust_Data_Type",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Rust \u8cc7\u6599\u578b\u5225",description:"Rust Data Type",keywords:["Rust","Data_Type"]},sidebar:"totem_sidebar",previous:{title:"Cargo \u5efa\u7acb\u5c08\u6848",permalink:"/en/docs/Rust\u8d77\u6b65\u8d70/Rust_Project"},next:{title:"Rust \u8b8a\u6578",permalink:"/en/docs/Rust\u8d77\u6b65\u8d70/Rust_Variable"}},o={},u=[{value:"Numeric",id:"numeric",level:2},{value:"Boolean \u5e03\u6797",id:"boolean-\u5e03\u6797",level:2},{value:"Character",id:"character",level:2},{value:'Tuple () <span id="rust_tuple">\xa0</span>',id:"tuple--",level:2},{value:'Array [] <span id="rust_array">\xa0</span>',id:"array--",level:2},{value:'Vector \u5411\u91cf <span id="rust_vector">\xa0</span>',id:"vector-\u5411\u91cf-",level:2},{value:"<strong>Vector Example: \u57fa\u672c\u5efa\u69cb\u65b9\u5f0f</strong>",id:"vector-example-\u57fa\u672c\u5efa\u69cb\u65b9\u5f0f",level:3},{value:"<strong>Vector Macro Example</strong>",id:"vector-macro-example",level:3},{value:"<strong>Fetch Value from Vector</strong>",id:"fetch-value-from-vector",level:3},{value:'\u904d\u6b77\u4e26\u6539\u503c <span id="iteration_go_with_modification">\xa0</span>',id:"\u904d\u6b77\u4e26\u6539\u503c-",level:3},{value:'<span id="vector_consist_of_diff_element">Vector \u88dd\u8f09\u4e0d\u540c\u578b\u5225\u5143\u7d20</span>',id:"vector-\u88dd\u8f09\u4e0d\u540c\u578b\u5225\u5143\u7d20",level:3},{value:"Unit Type",id:"unit-type",level:2},{value:"Unit-like Structs",id:"unit-like-structs",level:2}],s={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rust-\u8cc7\u6599\u578b\u5225"},"Rust \u8cc7\u6599\u578b\u5225"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u7d14\u91cf Scalar Type",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u6574\u6578 Integer, \u7d30\u5206 signed / unsigned  integer, \u9810\u8a2d\u70ba i32  "),(0,r.kt)("li",{parentName:"ul"},"\u6d6e\u9ede\u6578 Floating-Point, \u7d30\u5206\u70ba f32 / f64 , \u9810\u8a2d\u70ba f64 "),(0,r.kt)("li",{parentName:"ul"},"\u5e03\u6797  "),(0,r.kt)("li",{parentName:"ul"},"\u5b57\u5143  "))),(0,r.kt)("li",{parentName:"ul"},"\u8907\u5408 Compound Type",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\ud83d\udea9  ",(0,r.kt)("a",{parentName:"li",href:"#rust_tuple"},"Tuple ","(","\xa0",")"),": \u56fa\u5b9a\u9577\u5ea6\uff0c\u53ef\u4e0d\u540c\u578b\u5225    "),(0,r.kt)("li",{parentName:"ul"},"\ud83d\udea9  ",(0,r.kt)("a",{parentName:"li",href:"#rust_array"},"Array ","[","\xa0","]"),": \u56fa\u5b9a\u9577\u5ea6\uff0c\u5143\u7d20\u9700\u540c\u578b\u5225  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rust_vector"},"Vector"),": \u53ef\u8b8a\u9577\u5ea6\uff0c\u5143\u7d20\u9700\u540c\u578b\u5225  "))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./Rust_References_Borrowing#Rust_Slice"},"Slice \u578b\u5225"),"  ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u6307\u7684\u662f Compound Type \u7684\u90e8\u5206\u5207\u7247\uff0c\u56b4\u683c\u8aaa\u4f86\u4e0d\u7b97\u662f\u4e00\u7a2e\u578b\u5225\u3002\u50c5\u662f\u8907\u5408\u578b\u5225\u7684\u90e8\u5206\u53c3\u8003\u3002      "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./Rust_References_Borrowing#Rust_Slice"},"Rust \u53c3\u8003\u8207\u501f\u7528:Slice"),"  "))),(0,r.kt)("li",{parentName:"ul"},"\u96c6\u5408\u985e\u578b Collections  ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rust_vector"},"\u5411\u91cf Vector"),": \u53ef\u8b8a\u9577\u5ea6\uff0c\u5143\u7d20\u9700\u540c\u578b\u5225\u3002      "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rust_string"},"\u5b57\u4e32 String"),": \u5b57\u5143(chars)\u7684\u96c6\u5408\u3002  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rust_hashmap"},"\u96dc\u6e4a\u6620\u5c04 Hash Map"),": key-value       ")))),(0,r.kt)("h2",{id:"numeric"},"Numeric"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u7d30\u5206\u70ba signed / unsigned  integer",(0,r.kt)("br",{parentName:"p"}),"\n","\u7279\u6b8a\u8655:"),(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("p",{parentName:"blockquote"},"\u5b57\u9762\u91cf(literals): \u53ef\u4ee5\u5728\u6578\u503c\u5b57\u9762\u91cf\u5f8c\u52a0\u4e0a\u578b\u5225\uff0cex: 10 v.s. 10u8",(0,r.kt)("br",{parentName:"p"}),"\n","\u5b57\u9762\u91cf\u53ef\u4ee5\u52a0\u5e95\u7dda\uff0c\u65b9\u4fbf\u95b1\u8b80\uff0cex: 1000 v.s. 1_000",(0,r.kt)("br",{parentName:"p"}),"\n","\u6ce8\u610f\u6574\u6578\u9664\u6cd5: \u53d6\u6700\u63a5\u8fd1\u96f6\u7684\u4e0b\u754c\u6578\u503c(\u5225\u5fd8\u8a18\u8ca0\u6578\u7684\u9664\u6cd5)  "))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u4f4d\u5143\u9577\u5ea6"),(0,r.kt)("th",{parentName:"tr",align:null},"Signed (i)"),(0,r.kt)("th",{parentName:"tr",align:null},"Unsigned (u)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8-bit"),(0,r.kt)("td",{parentName:"tr",align:null},"i8"),(0,r.kt)("td",{parentName:"tr",align:null},"u8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16-bit"),(0,r.kt)("td",{parentName:"tr",align:null},"i16"),(0,r.kt)("td",{parentName:"tr",align:null},"u16")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"32-bit"),(0,r.kt)("td",{parentName:"tr",align:null},"i32 ","*"," \u9810\u8a2d\u6574\u6578\u578b\u5225"),(0,r.kt)("td",{parentName:"tr",align:null},"u32")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"64-bit"),(0,r.kt)("td",{parentName:"tr",align:null},"i64"),(0,r.kt)("td",{parentName:"tr",align:null},"u64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"128-bit"),(0,r.kt)("td",{parentName:"tr",align:null},"i128"),(0,r.kt)("td",{parentName:"tr",align:null},"u128")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arch(\u4f9d\u64da\u7cfb\u7d71\u67b6\u69cb\u6c7a\u5b9a)"),(0,r.kt)("td",{parentName:"tr",align:null},"isize"),(0,r.kt)("td",{parentName:"tr",align:null},"usize")))),(0,r.kt)("p",null,"##\u3000Floating-Point"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u7d30\u5206\u70ba f32 / f64, \u9810\u8a2d\u70ba f64 ","*","\n\u6d6e\u9ede\u6578\u4e00\u7387\u70ba signed ")),(0,r.kt)("h2",{id:"boolean-\u5e03\u6797"},"Boolean \u5e03\u6797"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u5c0f\u5beb true / false")),(0,r.kt)("h2",{id:"character"},"Character"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'String: double quote\uff0c\u96d9\u5f15\u865f\u8ce6\u503c\u3002 ""',(0,r.kt)("br",{parentName:"p"}),"\n","Char: single quote\uff0c\u55ae\u5f15\u865f\u8ce6\u503c\u3002 ''",(0,r.kt)("br",{parentName:"p"}),"\n","Rust Char: 4bit Unicode\u3002")),(0,r.kt)("h2",{id:"tuple--"},"Tuple ","(",")"," ",(0,r.kt)("span",{id:"rust_tuple"},"\xa0")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"immutable\uff0c\u56fa\u5b9a\u9577\u5ea6\uff0c\u5143\u7d20\u4e0d\u8981\u6c42\u540c\u578b\u5225\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","\u8ddf Python \u4e00\u6a23\uff0c Rust Tuple \u53ef\u4ee5\u9032\u884c\u89e3\u5305\u8ce6\u503c\u3002\n\u4e5f\u53ef\u4ee5\u7d93\u7531 ",(0,r.kt)("span",{style:{color:"#0044FF"}}," zero-based index \u53d6\u503c\u3002",(0,r.kt)("strong",{parentName:"p"},"\u64cd\u4f5c\u5b50\u70ba\u7c21\u55ae\u7684\u9ede")," \u7b26\u865f\u975e\u4e00\u822c\u5e38\u898b\u7684\u4e2d\u62ec\u865f "),"\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","\u53e6\u5916: Rust \u754c\u7a31\u7121\u5143\u7d20\u7684 tuple \u70ba Unit\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let totem = (45, 76.4, "Male");\n\n    let (age, weight, gender) = totem;\n    //let (age: i32, weight:f64, gender:$str) = totem;\n    let age2 = totem.0;\n\n    println!("age = {age}");\n    println!("age2 = {age2}");\n}\n')),(0,r.kt)("h2",{id:"array--"},"Array ","[","]"," ",(0,r.kt)("span",{id:"rust_array"},"\xa0")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"\u56fa\u5b9a\u9577\u5ea6\uff0c\u5143\u7d20\u540c\u578b\u5225\u3002"),(0,r.kt)("br",{parentName:"p"}),"\n","zero-based index \u4e2d\u62ec\u865f\u53d6\u503c\u3002\n\u8a9e\u6cd5:   ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Array Syntax"),"  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let variableName:[type; size] = [elements, ...]; \n\nlet variableName2:[defaultValue; size]; \n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Array Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let meal_special:[&str; 3] = ["Burger", "Coke", "french fries"]; \nlet main_dish = meal_special[0];\nprintln!("Main Dish = {main_dish}");\n')),(0,r.kt)("h2",{id:"vector-\u5411\u91cf-"},"Vector \u5411\u91cf ",(0,r.kt)("span",{id:"rust_vector"},"\xa0")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"\u6709\u8a31\u53ef\u8b8a\u9577\u5ea6\uff0c\u540c\u578b\u5225\u5143\u7d20\u7684\u5132\u5b58\u5143\u4ef6"),"  "),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"\u57fa\u672c\u5efa\u69cb\u65b9\u5f0f  "),(0,r.kt)("li",{parentName:"ul"},"\u4f7f\u7528\u5de8\u96c6\u5feb\u901f\u5efa\u69cb  "),(0,r.kt)("li",{parentName:"ul"},"\u81ea Vector \u53d6\u503c  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#iteration_go_with_modification"},(0,r.kt)("span",{style:{color:"#0044FF"}}," ",(0,r.kt)("strong",{parentName:"a"},"\u904d\u6b77\u4e26\u6539\u503c")," "),": \ud83d\udd8d\ufe0f \u7279\u6b8a\uff0c\u5927\u90e8\u5206\u8a9e\u8a00\u4e26\u4e0d\u5141\u8a31"),"  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#vector_consist_of_diff_element"},"\u6253\u7834 Vector \u540c\u578b\u5225\u539f\u7269\u7684\u9650\u5236: \u85c9\u7531 Rust enum variant \u7684\u7279\u6b8a\u7279\u6027\u3002")))),(0,r.kt)("h3",{id:"vector-example-\u57fa\u672c\u5efa\u69cb\u65b9\u5f0f"},(0,r.kt)("strong",{parentName:"h3"},"Vector Example: \u57fa\u672c\u5efa\u69cb\u65b9\u5f0f")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut shopping_cart: Vec<&str> = Vec::new();\n\nshopping_cart.push("Book");\nshopping_cart.push("Pen");\nshopping_cart.push("Eraser");\nshopping_cart.push("Ruler");\n\n')),(0,r.kt)("h3",{id:"vector-macro-example"},(0,r.kt)("strong",{parentName:"h3"},"Vector Macro Example")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"rust \u63d0\u4f9b\u4e86 vec! \u5de8\u96c6\uff0c\u7528\u4f86\u5feb\u901f\u5efa\u7acb vector\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn use_macro_to_init_vector() {\n    let v:Vec<&str> = vec!["A", "B", "C"];\n\n    for i in &v {\n        println!("{i}");\n    }\n}\n')),(0,r.kt)("h3",{id:"fetch-value-from-vector"},(0,r.kt)("strong",{parentName:"h3"},"Fetch Value from Vector")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8a3b: Option \u53ef\u7d93\u7531 unwrap() \u53d6\u503c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn create_vector() {\n    let mut shopping_cart: Vec<&str> = Vec::new();\n\n    shopping_cart.push("Book");\n    shopping_cart.push("Pen");\n    shopping_cart.push("Eraser");\n    shopping_cart.push("Ruler");\n\n    for item in &shopping_cart {\n        println!("{item}");\n    }\n\n    // Vector \u53d6\u503c\u65b9\u5f0f, by index, by get\n    // \u7d22\u5f15\u8a9e\u6cd5\n    let second: &str = shopping_cart[1];\n    println!("The 2nd is: {second}");\n    //The 2nd is Pen\n\n    // get \u8a9e\u6cd5\n    let get_second: Option<&&str> = shopping_cart.get(1);\n    match get_second {\n        Some(get_second) => println!("Get 2nd: {get_second}"), //Get 2nd: Pen, \u4e0d\u7528 unwrap?\n        None => println!("Not exists: {:?}", get_second),  //Not exists: None\n    }\n\n    if (get_second != None) {\n        println!("2nd.unwrap is not None: {}", get_second.unwrap());\n        // 2nd.unwrap is not None: Pen\n\n        println!("2nd.unwrap is not None ?: : {:?}", get_second.unwrap());\n        // 2nd.unwrap is not None ?: : "Pen"\n\n        println!("2nd is not None ?: : {:?}", get_second);\n        // 2nd is not None ?: : Some("Pen")\n    }\n}\n')),(0,r.kt)("h3",{id:"\u904d\u6b77\u4e26\u6539\u503c-"},"\u904d\u6b77\u4e26\u6539\u503c ",(0,r.kt)("span",{id:"iteration_go_with_modification"},"\xa0")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4f7f\u7528\u89e3\u53c3\u8003 operator ","*","\uff0c\u4e26\u7d66\u4e88\u65b0\u503c\u3002  ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn iteration_go_with_modification() {\n    let mut vect: Vec<i32> = vec![1 , 2, 3];\n\n    println!("Original");\n    for item in &vect {\n        println!("{item}");\n    }\n\n    println!("Iterate and Modify");\n    for item in &mut vect { //\u53d6\u5f97\u53ef\u8b8a\u53c3\u8003, \n        *item = item.clone() * 10; //\u4f7f\u7528\u89e3\u53c3\u8003\u904b\u7b97\u5b50\uff0c\u6539\u6578\u503c\u3002\n    }\n    for item in &vect {\n        println!("{item}");\n    }\n    // Iterate and Modify\n    // 10\n    // 20\n    // 30\n}\n')),(0,r.kt)("h3",{id:"vector-\u88dd\u8f09\u4e0d\u540c\u578b\u5225\u5143\u7d20"},(0,r.kt)("span",{id:"vector_consist_of_diff_element"},"Vector \u88dd\u8f09\u4e0d\u540c\u578b\u5225\u5143\u7d20")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u85c9\u7531 ",(0,r.kt)("a",{parentName:"p",href:"./Rust_Enum_Match"},"Rust enum variant")," \u7684\u7279\u6b8a\u7279\u6027\uff0c\u4e5f\u5c31\u662f\u6bcf\u500b variant \u53ef\u4ee5\u5177\u5099\u5404\u81ea\u7279\u6709\u7684 fields\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","\u85c9\u7531\u9019\u500b\u7279\u6027\u8b93\u6bcf\u500b enum instance \u628a\u6301\u4e00\u500b\u7279\u5b9a\u7684\u578b\u5225\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","\u518d\u5c07\u9019\u4e9b enum instances \u5b58\u5728 Vector \u4e4b\u4e2d\u3002")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4f7f\u7528\u91cd\u9ede:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"enum variants \u5efa\u7acb\u65b9\u5f0f  "),(0,r.kt)("li",{parentName:"ul"},"\u81ea enum instance \u4e2d\u53d6\u51fa field \u5167\u5bb9(unpacking)    ")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'enum TextFieldDataType {\n    StringType(String),\n    DateType(DateTime<Utc>),\n    NumericType(i32),\n}\n\n\npub fn vector_multitype_elements() {\n    // \u4ee5 Vector \u5b58\u591a\u500b TextFieldDataType\n    // \u6bcf\u500b TextFieldDataType \u651c\u5e36\u4e00\u500b\u4e0d\u540c\u578b\u5225\u7684\u8cc7\u6599\n    let multi: Vec<TextFieldDataType> = vec![\n        TextFieldDataType::StringType(String::from("Totem Rust")),\n        TextFieldDataType::NumericType(100),\n        TextFieldDataType::DateType(Utc::now()),\n    ];\n\n    for item in &multi {\n        let mut value = String::from("");\n\n       // # \u53d6\u51fa TextFieldDataType \u6240\u651c\u5e36\u7684\u8cc7\u6599\uff0c\u4e26\u7d71\u4e00\u8f49\u6210 String \u9032\u884c\u5f8c\u7e8c\u8655\u7406\u3002\n       // \u9019\u908a\u727d\u6d89\u5230 Rust \u8cc7\u6599\u89e3\u5305 (unpacking)\n        match item {\n            TextFieldDataType::StringType(field) => {\n                value = field.clone();\n            }\n            TextFieldDataType::NumericType(number) => {\n               value = number.to_string();\n            }\n            TextFieldDataType::DateType(date) => {\n                value = format!("{}", date);\n            }\n        }\n\n        println!("{}", value);\n    }\n}\n')),(0,r.kt)("h2",{id:"unit-type"},"Unit Type"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u7279\u6b8a\u7684 Tuple \u72c0\u614b\uff0c\u6c92\u6709\u4efb\u4f55 elements \u7684 Tuple \u53c8\u7a31\u70ba\u55ae\u5143\u578b\u5225 (Unit Type)\uff0c",(0,r.kt)("br",{parentName:"p"}),"\n","\u901a\u5e38\u7528\u4f86\u4ee3\u8868\u4e00\u500b\u7a7a\u7684\u56de\u50b3\u578b\u503c\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","\u7576 expression \u6c92\u6709\u56de\u50b3\u4efb\u4f55\u503c\u7684\u8a71\uff0cRust \u6703\u96b1\u542b\u5730\u56de\u50b3\u55ae\u5143\u578b\u5225\u3002  "),(0,r.kt)("p",{parentName:"blockquote"},"\u4e0d\u77e5\u70ba\u4ec0\u9ebc Rust Documentation \u8981\u984d\u5916\u63d0 Unit Type\uff0c\u5c31\u55ae\u7d14\u662f\u4e00\u500b\u7a7a\u7684 Tuple\u3002")),(0,r.kt)("h2",{id:"unit-like-structs"},"Unit-like Structs"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Struct \u985e\u4f3c Java \u7684 Class\u3002\u7528\u4f86\u5c07\u771f\u5be6\u4e8b\u7269\u62bd\u8c61\u5316\u6642\u4f7f\u7528\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","Unit-like Struct \u5247\u662f\u6307\u5167\u5bb9\u5168\u7a7a\u7684 Struct\u3002")))}m.isMDXComponent=!0}}]);