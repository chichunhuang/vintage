"use strict";(self.webpackChunktotem=self.webpackChunktotem||[]).push([[2520],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>v});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,v=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(v,i(i({ref:t},s),{},{components:n})):r.createElement(v,i({ref:t},s))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9014:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={title:"Rust \u5411\u91cf Vector",description:"Rust Vector",keywords:["Rust","Vector"]},i="Vector",l={unversionedId:"Rust\u8d77\u6b65\u8d70/Rust_Data_Type_Vector",id:"Rust\u8d77\u6b65\u8d70/Rust_Data_Type_Vector",title:"Rust \u5411\u91cf Vector",description:"Rust Vector",source:"@site/docs/003_Rust\u8d77\u6b65\u8d70/0032_Rust_Data_Type_Vector.md",sourceDirName:"003_Rust\u8d77\u6b65\u8d70",slug:"/Rust\u8d77\u6b65\u8d70/Rust_Data_Type_Vector",permalink:"/docs/Rust\u8d77\u6b65\u8d70/Rust_Data_Type_Vector",draft:!1,tags:[],version:"current",sidebarPosition:32,frontMatter:{title:"Rust \u5411\u91cf Vector",description:"Rust Vector",keywords:["Rust","Vector"]},sidebar:"totem_sidebar",previous:{title:"Rust_Data_Type_String",permalink:"/docs/Rust\u8d77\u6b65\u8d70/Rust_Data_Type_String"},next:{title:"Rust_Data_Type_Hashmap",permalink:"/docs/Rust\u8d77\u6b65\u8d70/Rust_Data_Type_Hashmap"}},p={},c=[{value:"Vector \u5efa\u69cb\u65b9\u5f0f",id:"vector-\u5efa\u69cb\u65b9\u5f0f",level:2},{value:"<strong>Vector : \u57fa\u672c\u5efa\u69cb\u65b9\u5f0f new</strong>",id:"vector--\u57fa\u672c\u5efa\u69cb\u65b9\u5f0f-new",level:3},{value:"<strong>Vector : \u7d93\u7531 Macro \u5efa\u69cb</strong>",id:"vector--\u7d93\u7531-macro-\u5efa\u69cb",level:3},{value:"Vector \u57fa\u672c\u4f7f\u7528\u65b9\u5f0f",id:"vector-\u57fa\u672c\u4f7f\u7528\u65b9\u5f0f",level:2},{value:"<strong>\u81ea Vector \u4e2d\u9078\u53d6\u5143\u7d20</strong>",id:"\u81ea-vector-\u4e2d\u9078\u53d6\u5143\u7d20",level:3},{value:"Vector \u8ff4\u5708\u8d70\u8a2a\u65b9\u5f0f",id:"vector-\u8ff4\u5708\u8d70\u8a2a\u65b9\u5f0f",level:2},{value:"Vector \u8d70\u8a2a: for each",id:"vector-\u8d70\u8a2a-for-each",level:3},{value:"Vector \u8d70\u8a2a: enumerate",id:"vector-\u8d70\u8a2a-enumerate",level:3},{value:"DSL: Java Collection \u4e2d\u7684 stream",id:"dsl-java-collection-\u4e2d\u7684-stream",level:3},{value:'\ud83d\udd8d\ufe0f \u904d\u6b77\u4e26\u6539\u503c \ud83d\udd8d\ufe0f<span id="iteration_go_with_modification">\xa0</span>',id:"\ufe0f-\u904d\u6b77\u4e26\u6539\u503c-\ufe0f",level:3},{value:'<span id="vector_consist_of_diff_element">Vector \u88dd\u8f09\u4e0d\u540c\u578b\u5225\u5143\u7d20</span>',id:"vector-\u88dd\u8f09\u4e0d\u540c\u578b\u5225\u5143\u7d20",level:3},{value:"v.iter() vs v.into_iter() \u5dee\u7570",id:"viter-vs-vinto_iter-\u5dee\u7570",level:2}],s={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"vector"},"Vector"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Vector \u8cc7\u5217\u7d50\u69cb\u4e2d\u96c6\u5408\u7684\u4e00\u7a2e: \u53ef\u7528\u4f86\u653e\u7f6e\u591a\u500b\u5143\u7d20\uff0c\u7279\u8272\u70ba ",(0,a.kt)("strong",{parentName:"p"},"\u53ef\u8b8a\u9577\u5ea6\uff0c\u4f46\u5143\u7d20\u9700\u540c\u578b\u5225"),"\u3002\n\u4f46\u662f\uff0c\u53ef\u4ee5\u85c9\u7531 ",(0,a.kt)("a",{parentName:"p",href:"#vector_consist_of_diff_element"},"enum variants \u7279\u6027\uff0c\u8b93 Vector \u88dd\u8f09\u4e0d\u540c\u578b\u5225\u5143\u7d20"),(0,a.kt)("br",{parentName:"p"}),"\n","\u6709\u5225\u65bc ",(0,a.kt)("a",{parentName:"p",href:"./Rust_Data_Type#rust_array"},"Tuple")," \u8207 ",(0,a.kt)("a",{parentName:"p",href:"./Rust_Data_Type#rust_array"},"Array"),"\u3002",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("a",{parentName:"p",href:"./Rust_Data_Type#rust_tuple"},"Tuple"),":",(0,a.kt)("strong",{parentName:"p"},"\u56fa\u5b9a\u9577\u5ea6\uff0c\u5143\u7d20\u9700\u540c\u578b\u5225\u3002"),(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("a",{parentName:"p",href:"./Rust_Data_Type#rust_array"},"Array"),":",(0,a.kt)("strong",{parentName:"p"},"\u56fa\u5b9a\u9577\u5ea6\uff0c\u5143\u7d20\u4e0d\u8981\u6c42\u540c\u578b\u5225"),"  "),(0,a.kt)("p",{parentName:"blockquote"},"Vector \u5141\u8a31",(0,a.kt)("a",{parentName:"p",href:"#iteration_go_with_modification"},(0,a.kt)("span",{style:{color:"#0044FF"}}," ",(0,a.kt)("strong",{parentName:"a"},"\u904d\u6b77\u4e26\u6539\u503c")," "),": \ud83d\udd8d\ufe0f \u7279\u6b8a\uff0c\u5927\u90e8\u5206\u8a9e\u8a00\u4e26\u4e0d\u5141\u8a31"))),(0,a.kt)("h2",{id:"vector-\u5efa\u69cb\u65b9\u5f0f"},"Vector \u5efa\u69cb\u65b9\u5f0f"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Vector \u53ef\u7d93\u7531 new \u5efa\u7acb instance\uff0c\u4e26\u642d\u914d push \u589e\u52a0\u5143\u7d20\u3002",(0,a.kt)("br",{parentName:"p"}),"\n","\u4e5f\u53ef\u7d93\u7531 vec macro \u5efa\u7acb\u6642\u4e00\u4f75\u6307\u5b9a\u5143\u7d20\u3002  ")),(0,a.kt)("h3",{id:"vector--\u57fa\u672c\u5efa\u69cb\u65b9\u5f0f-new"},(0,a.kt)("strong",{parentName:"h3"},"Vector : \u57fa\u672c\u5efa\u69cb\u65b9\u5f0f new")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let mut shopping_cart: Vec<&str> = Vec::new();\n\nshopping_cart.push("Book");\nshopping_cart.push("Pen");\nshopping_cart.push("Eraser");\nshopping_cart.push("Ruler");\n\n')),(0,a.kt)("h3",{id:"vector--\u7d93\u7531-macro-\u5efa\u69cb"},(0,a.kt)("strong",{parentName:"h3"},"Vector : \u7d93\u7531 Macro \u5efa\u69cb")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"rust \u63d0\u4f9b\u4e86 vec! \u5de8\u96c6\uff0c\u7528\u4f86\u5feb\u901f\u5efa\u7acb vector\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn use_macro_to_init_vector() {\n    let v:Vec<&str> = vec!["A", "B", "C"];\n\n    for i in &v {\n        println!("{i}");\n    }\n}\n')),(0,a.kt)("h2",{id:"vector-\u57fa\u672c\u4f7f\u7528\u65b9\u5f0f"},"Vector \u57fa\u672c\u4f7f\u7528\u65b9\u5f0f"),(0,a.kt)("h3",{id:"\u81ea-vector-\u4e2d\u9078\u53d6\u5143\u7d20"},(0,a.kt)("strong",{parentName:"h3"},"\u81ea Vector \u4e2d\u9078\u53d6\u5143\u7d20")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5169\u7a2e\u65b9\u5f0f: by index \u8207 by get method",(0,a.kt)("br",{parentName:"p"}),"\n","by index: ",(0,a.kt)("a",{parentName:"p",href:"./Rust_Data_Type#rust_array"},"Array")," \u76f8\u540c\u7d93\u7531\u89d2\u62ec\u865f\u6307\u5b9a index\u3002  "),(0,a.kt)("blockquote",{parentName:"blockquote"},(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"./Rust_Data_Type#rust_tuple"},"Tuple")," \u65b9\u5f0f\u6700\u602a\u7570\uff0c\u76f4\u63a5\u4ee5\u9ede\u53d6\u503c\u3002  ")),(0,a.kt)("p",{parentName:"blockquote"},"by get method: \u8207 Java \u76f8\u540c\u53ef\u4ee5\u4ee5 get(index) \u65b9\u6cd5\u53d6\u51fa ",(0,a.kt)("strong",{parentName:"p"},"Option")," \u518d\u642d\u914d ",(0,a.kt)("strong",{parentName:"p"},"option.unwrap","(",")")," \u53d6\u503c\u3002    ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn create_vector() {\n    let mut shopping_cart: Vec<&str> = Vec::new();\n\n    shopping_cart.push("Book");\n    shopping_cart.push("Pen");\n    shopping_cart.push("Eraser");\n    shopping_cart.push("Ruler");\n\n    //& \u8a18\u61b6\u9ad4\u501f\u7528\n    for item in &shopping_cart {\n        println!("{item}");\n    }\n\n    // Vector \u53d6\u503c\u65b9\u5f0f, by index, by get\n    // \u7d22\u5f15\u8a9e\u6cd5\n    let second: &str = shopping_cart[1];\n    println!("The 2nd is: {second}");\n    //The 2nd is Pen\n\n    // get \u8a9e\u6cd5: \u53ef\u5148\u53d6\u51fa Option\n    let get_second: Option<&&str> = shopping_cart.get(1);\n    match get_second {\n        Some(get_second) => println!("Get 2nd: {get_second}"), //Get 2nd: Pen, \u4e0d\u7528 unwrap?\n        None => println!("Not exists: {:?}", get_second),  //Not exists: None\n    }\n\n    // Vector \u5148\u53d6\u51fa Option \u518d\u89e3\u5305\u53d6\u503c\n    if (get_second != None) {\n        println!("2nd.unwrap is not None: {}", get_second.unwrap());\n        // 2nd.unwrap is not None: Pen\n\n        println!("2nd.unwrap is not None ?: : {:?}", get_second.unwrap());\n        // 2nd.unwrap is not None ?: : "Pen"\n\n        println!("2nd is not None ?: : {:?}", get_second);\n        // 2nd is not None ?: : Some("Pen")\n    }\n}\n')),(0,a.kt)("h2",{id:"vector-\u8ff4\u5708\u8d70\u8a2a\u65b9\u5f0f"},"Vector \u8ff4\u5708\u8d70\u8a2a\u65b9\u5f0f"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Vector \u5141\u8a31",(0,a.kt)("a",{parentName:"p",href:"#iteration_go_with_modification"},(0,a.kt)("span",{style:{color:"#0044FF"}}," ",(0,a.kt)("strong",{parentName:"a"},"\u904d\u6b77\u4e26\u6539\u503c")," "),": \ud83d\udd8d\ufe0f \u7279\u6b8a\uff0c\u5927\u90e8\u5206\u8a9e\u8a00\u4e26\u4e0d\u5141\u8a31"))),(0,a.kt)("h3",{id:"vector-\u8d70\u8a2a-for-each"},"Vector \u8d70\u8a2a: for each"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4f7f\u7528 rust iterator \u4f86 lazy \u8d70\u8a2a\u3002  "),(0,a.kt)("li",{parentName:"ul"},"v.iter","(",")"," \u50c5\u662f\u5efa\u7acb\u8fed\u4ee3\u5668\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let v = vec![1, 2, 3]; \nfor i in v.iter() { \n    println!("{}", i); \n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let some_vec = vec![1, 2, 3];\nfor i in &some_vec {\n    println!("{}", i);\n}\n')),(0,a.kt)("h3",{id:"vector-\u8d70\u8a2a-enumerate"},"Vector \u8d70\u8a2a: enumerate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let vec = vec![1, 2, 3]; \nfor (index, element) in vec.enumerate() { \n    println!("The element:{} is {}", index, element); \n}\n')),(0,a.kt)("h3",{id:"dsl-java-collection-\u4e2d\u7684-stream"},"DSL: Java Collection \u4e2d\u7684 stream"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"vectorA.iter().map(|x| /",(0,a.kt)("em",{parentName:"li"}," do something here "),"/)  "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"vec.into_iter()")," : alloc::vec::into_iter::IntoIter\\<T",">","   "),(0,a.kt)("li",{parentName:"ul"},"\u8ddf Java stream \u76f8\u540c\uff0c\u9019\u908a\u7684\u52d5\u4f5c\u5177 Lazy \u7279\u6027   ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'//looping\nlet vec = vec![1, 2, 3]; \nlet doubled: Vec<i32> = vec.into_iter().map(|x| x * 2).collect(); \n//vec.into_iter() : alloc::vec::into_iter::IntoIter<T>   \n\nprintln!("{:?}", doubled); // [2, 4, 6]\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u8a9e\u6cd5\u6bd4\u8f03")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"//java\nList x = collection.stream().map((item) -> do something with item).collect(toList());\n// (item) -> , \u5c0f\u62ec\u865f\u505asignature\uff0c\u7bad\u982d\u5f15\u51fa\u5be6\u4f5c\n\n//rust\nlet x2: Vec = vec.into_iter().map(|item| do something with item ).collect(); \n// |item| , \u7701\u7565\u7bad\u982d, \u96d9\u69d3 || \u505a signature\uff0c\u5f8c\u65b9\u76f4\u63a5\u9644\u52a0\u5be6\u4f5c\n\n")),(0,a.kt)("h3",{id:"\ufe0f-\u904d\u6b77\u4e26\u6539\u503c-\ufe0f"},"\ud83d\udd8d\ufe0f \u904d\u6b77\u4e26\u6539\u503c \ud83d\udd8d\ufe0f",(0,a.kt)("span",{id:"iteration_go_with_modification"},"\xa0")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4f7f\u7528 ",(0,a.kt)("span",{style:{color:"#FF1100"}},"\u89e3\u53c3\u8003 operator ","*")," \uff0c\u4e26\u7d66\u4e88\u65b0\u503c\u3002  ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn iteration_go_with_modification() {\n    let mut vect: Vec<i32> = vec![1 , 2, 3];\n\n    println!("\u4e00\u822c\u8ff4\u5708\u8d70\u8a2a");\n    for item in &vect {\n        println!("{item}");\n    }\n\n    println!("\u8d70\u8a2a\uff0c\u89e3\u53c3\u8003\u4e26\u7570\u52d5");\n    for item in &mut vect { //\u53d6\u5f97\u53ef\u8b8a\u53c3\u8003, \n        *item = item.clone() * 10; //\u4f7f\u7528\u89e3\u53c3\u8003\u904b\u7b97\u5b50\uff0c\u6539\u6578\u503c\u3002\n    }\n    for item in &vect {\n        println!("{item}");\n    }\n    // Iterate and Modify\n    // 10\n    // 20\n    // 30\n}\n')),(0,a.kt)("h3",{id:"vector-\u88dd\u8f09\u4e0d\u540c\u578b\u5225\u5143\u7d20"},(0,a.kt)("span",{id:"vector_consist_of_diff_element"},"Vector \u88dd\u8f09\u4e0d\u540c\u578b\u5225\u5143\u7d20")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u85c9\u7531 ",(0,a.kt)("a",{parentName:"p",href:"./Rust_Enum_Match"},"Rust enum variant")," \u7684\u7279\u6b8a\u7279\u6027\uff0c\u4e5f\u5c31\u662f\u6bcf\u500b variant \u53ef\u4ee5\u5177\u5099\u5404\u81ea\u7279\u6709\u7684 fields\u3002",(0,a.kt)("br",{parentName:"p"}),"\n","\u85c9\u7531\u9019\u500b\u7279\u6027\u8b93\u6bcf\u500b enum instance \u628a\u6301\u4e00\u500b\u7279\u5b9a\u7684\u578b\u5225\u3002",(0,a.kt)("br",{parentName:"p"}),"\n","\u518d\u5c07\u9019\u4e9b enum instances \u5b58\u5728 Vector \u4e4b\u4e2d\u3002  ")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4f7f\u7528\u91cd\u9ede:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"enum variants \u5efa\u7acb\u65b9\u5f0f  "),(0,a.kt)("li",{parentName:"ul"},"\u81ea enum instance \u4e2d\u53d6\u51fa field \u5167\u5bb9","(","unpacking",")","    ")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'enum TextFieldDataType {\n    StringType(String),\n    DateType(DateTime<Utc>),\n    NumericType(i32),\n}\n\n\npub fn vector_multitype_elements() {\n    // \u4ee5 Vector \u5b58\u591a\u500b TextFieldDataType\n    // \u6bcf\u500b TextFieldDataType \u651c\u5e36\u4e00\u500b\u4e0d\u540c\u578b\u5225\u7684\u8cc7\u6599\n    let multi: Vec<TextFieldDataType> = vec![\n        TextFieldDataType::StringType(String::from("Totem Study Rust")),\n        TextFieldDataType::NumericType(100),\n        TextFieldDataType::DateType(Utc::now()),\n    ];\n\n    for item in &multi {\n        // \u9019\u908a\u7684\u7bc4\u4f8b\u662f\u5c07\u4e0d\u540c\u578b\u5225\u5143\u7d20\u8f49\u6210 string \u4f86\u5448\u73fe\u3002\n        let mut value = String::from("");\n\n       // # \u53d6\u51fa TextFieldDataType \u6240\u651c\u5e36\u7684\u8cc7\u6599\uff0c\u4e26\u7d71\u4e00\u8f49\u6210 String \u9032\u884c\u5f8c\u7e8c\u8655\u7406\u3002\n       // \u9019\u908a\u727d\u6d89\u5230 Rust \u8cc7\u6599\u89e3\u5305 (unpacking)\n        match item {\n            TextFieldDataType::StringType(field) => {\n                value = field.clone();\n            }\n            TextFieldDataType::NumericType(number) => {\n               value = number.to_string();\n            }\n            TextFieldDataType::DateType(date) => {\n                value = format!("{}", date);\n            }\n        }\n\n        println!("{}", value);\n    }\n}\n')),(0,a.kt)("h2",{id:"viter-vs-vinto_iter-\u5dee\u7570"},"v.iter","(",")"," vs v.into_iter","(",")"," \u5dee\u7570"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"*","i  ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'//looping + in-place modification\nlet mut some_vec = vec![1, 2, 3];\nsome_vec.iter_mut().for_each(|i| *i *= 2);\nprintln!("{:?}", some_vec); // [2, 4, 6]\n')))}m.isMDXComponent=!0}}]);